name: Build

on:
   workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x
      
    - name: Read manifest and set game version
      id: read-json
      run: |
        json_content=$(cat ${{github.workspace}}/ScoreSaber/manifest.json)
        game_version=$(echo "$json_content" | jq -r .gameVersion)
        echo "Game Version: $game_version"
        echo "::set-output name=game_version::$game_version"  
        
    - name: Checkout stripped dlls
      uses: actions/checkout@v4
      with:
        repository: ScoreSaber/scoresaber-pc-ci-stripped
        token: ${{ secrets.CI_PAT }}
        path: Stripped
        sparse-checkout: |
          Versions/${{ steps.read-json.outputs.game_version }}
        sparse-checkout-cone-mode: false
        
    - name: Verify that stripped dlls actually exist
      run: |
        if [ -z "$(ls -A Stripped/Versions/${{ steps.read-json.outputs.game_version }})" ]; then
          echo "Error: Stripped dependencies folder is empty!"
          exit 1
        fi
        
    - name: Move stripped dlls to refs
      run: mv Stripped/Versions/${{ steps.read-json.outputs.game_version }} Refs
      
    - name: Acquire mod references
      uses: Goobwabber/download-beatmods-deps@1.3
      with:
        manifest: ${{github.workspace}}/ScoreSaber/manifest.json
        
    - name: Build
      id: Build
      env:
        FrameworkPathOverride: /usr/lib/mono/4.8-api
      run: dotnet build --configuration Release
      
    - name: Git Status
      run: git status
      
    - name: Echo file name
      run: echo $BUILDTEXT \($ASSEMBLYNAME\)
      env:
        BUILDTEXT: Filename=${{ steps.Build.outputs.filename }}
        ASSEMBLYNAME: AssemblyName=${{ steps.Build.outputs.assemblyname }}
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.Build.outputs.filename }}
        path: ${{ steps.Build.outputs.artifactpath }}
